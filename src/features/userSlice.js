import { createSlice } from "@reduxjs/toolkit";
import { loginApi,registerAPI } from "./manager";


// The function below is called a thunk and allows us to perform async logic. It
// can be dispatched like a regular action: `dispatch(incrementAsync(10))`. This
// will call the thunk with the `dispatch` function as the first argument. Async
// code can then be executed and other actions can be dispatched. Thunks are
// typically used to make async requests.

export const userSlice = createSlice({
  name: "user",
  initialState : {
    register_user:{},
    login_user:{},
    message:'',
    status_code:''
  },
  // The `reducers` field lets us define reducers and generate associated actions
  reducers: {
    register:(state,action)=>{
        state.register_user=action.payload
    },
    
    login:(state,action)=>{
        state.login_user=action.payload
        state.message=action.payload?.data?.message
    },
    error:(state,action)=>{
      state.message=action.payload.message
    }
    // Use the PayloadAction type to declare the contents of `action.payload`
    
  },
  // The `extraReducers` field lets the slice handle actions defined elsewhere,
  // including actions generated by createAsyncThunk or in other slices.
});


export const {register,login,logout,error } = userSlice.actions;

export function userRegister(value){
  return dispatch=>registerAPI(value).then(res=>dispatch(register(res.data))).catch(err=>dispatch(error(err.response.data)))

}

export function userLogin(value){
  return dispatch=>loginApi(value).then(res=>dispatch(login(res.data))).catch(err=>dispatch(error.response.data))
}

//setAuthorizationToken(res.data?.token)


// The function below is called a selector and allows us to select a value from
// the state. Selectors can also be defined inline where they're used instead of
// in the slice file. For example: `useSelector((state: RootState) => state.counter.value)`
// export const selectUser = (state)=>state.user.user;


// We can also write thunks by hand, which may contain both sync and async logic.
// Here's an example of conditionally dispatching actions based on current state.

export default userSlice.reducer;
